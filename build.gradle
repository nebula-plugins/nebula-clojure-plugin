/*
 * Copyright 2014-2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    id 'com.netflix.nebula.plugin-plugin' version '22.0.2'
    id 'java-gradle-plugin'
}

// Any callers need to have this repository too.
repositories {
    maven { url 'https://clojars.org/repo' }
    mavenCentral()
}

description 'Small wrapper around clojuresque'

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}

dependencies {
    implementation 'org.clojure:clojure:1.10.3'
    implementation 'org.clojure:tools.namespace:1.1.0'
    implementation 'us.bpsm:edn-java:0.4.3'
    testImplementation gradleTestKit()
    testImplementation 'com.netflix.nebula:nebula-publishing-plugin:latest.release'
}

gradlePlugin {
    plugins {
        nebulaClojureLegacy {
            id = 'nebula.clojure'
            displayName = 'Nebula Clojure'
            description = project.description
            implementationClass = 'nebula.plugin.clojure.NebulaClojurePlugin'
            tags.set(['nebula', 'clojure'])
        }
        nebulaClojure {
            id = 'com.netflix.nebula.clojure'
            displayName = 'Nebula Clojure'
            description = project.description
            implementationClass = 'nebula.plugin.clojure.NebulaClojurePlugin'
            tags.set(['nebula', 'clojure'])
        }
    }
}

tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}
